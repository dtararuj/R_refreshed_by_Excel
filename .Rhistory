##dluzsza wersja, nie zawsze dziala
from_number<- "+12674406233"
to_number <- "+48515784380"
my_message <- tw_send_message(
to = Sys.getenv(to_number),
from = Sys.getenv(from_number),
body = paste("jestes mistrzem swiata","kot")
)
#wyslanie prostej wiadomosci tekstowej (DOKAD, SKAD, TRESC)
my_message <- tw_send_message("+48515784380","+12674406233","tesT")
library(twilio)
##dluzsza wersja, nie zawsze dziala
from_number<- "+12674406233"
to_number <- "+48515784380"
#wyslanie prostej wiadomosci tekstowej (DOKAD, SKAD, TRESC)
my_message <- tw_send_message("+48515784380","+12674406233","tesT")
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv("TWILIO_SID")
Sys.getenv("TWILIO_TOKEN")
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv("TWILIO_SID")
Sys.getenv("TWILIO_TOKEN")
##dluzsza wersja, nie zawsze dziala
from_number<- "+12674406233"
to_number <- "+48515784380"
my_message <- tw_send_message(
to = Sys.getenv(to_number),
from = Sys.getenv(from_number),
body = paste("jestes mistrzem swiata","kot")
)
#wyslanie prostej wiadomosci tekstowej (DOKAD, SKAD, TRESC)
my_message <- tw_send_message("+48515784380","+12674406233","tesT")
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv(TWILIO_SID)
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv("TWILIO_SID")
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv("TWILIO_SID")
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv("TWILIO_SID")
library(twilio)
#dane do logowania powinny byÄ‡ poukrywane. Raz wczytam to bÄ™dÄ… widoczne w Ĺ›rodowisku.
Sys.getenv("TWILIO_SID")
Sys.getenv("TWILIO_TOKEN")
##dluzsza wersja, nie zawsze dziala
from_number<- "+12674406233"
to_number <- "+48515784380"
#wyslanie prostej wiadomosci tekstowej
my_message <- tw_send_message("+48515784380","+12674406233","tesT")
Sys.getenv("xyz")
setwd("~/")
Sys.getenv("xyz")
Sys.getenv("xyx")
Sys.getenv("xyx") +5
as.numeric(Sys.getenv("xyx")) +5
2.33*1.5+2.94*1.5+2*1
(2.33*1.5+2.94*1.5+2*1)*2
library(shiny)
library(dplyr)
library(rhandsontable)
install.packages("rhandsontable")
library(rhandsontable)
shinyUI<-fluidPage(
fluidRow(
titlePanel(title = "Application in RSHINY"),
textInput("text1", "Give numbers with commas","1,3,12,18"),
submitButton("Update!"),
column(8,
actionButton("saveBtn","Save"),
rHandsontableOutput("table")
)
))
output$table <- renderRHandsontable({
arg=(strsplit(input$text1,",") %>% unlist() %>% as.numeric())
tabelaa=dataframe_FUNCTION(arg)
rownames(tabelaa)=paste("Row",1:4,sep="")
rhandsontable(format(tabelaa, digits=0),width=400,rowHeaderWidth=300)
})
shinyServer<-function(input,output,session){
output$table <- renderRHandsontable({
arg=(strsplit(input$text1,",") %>% unlist() %>% as.numeric())
tabelaa=dataframe_FUNCTION(arg)
rownames(tabelaa)=paste("Row",1:4,sep="")
rhandsontable(format(tabelaa, digits=0),width=400,rowHeaderWidth=300)
})
shinyServer<-function(input,output,session){
output$table <- renderRHandsontable({
arg=(strsplit(input$text1,",") %>% unlist() %>% as.numeric())
tabelaa=dataframe_FUNCTION(arg)
rownames(tabelaa)=paste("Row",1:4,sep="")
rhandsontable(format(tabelaa, digits=0),width=400,rowHeaderWidth=300)
})
}
runApp()
runApp())
runApp()
runApp("Application in RSHINY")
shinyApp(ui=shinyUI, server=shinyServer)
dataframe_FUNCTION<-function(...){
aa=list(...)
my_df=data.frame(aa)
colnames(my_df)="COL"
return(my_df^2)
}
shinyApp(ui=shinyUI, server=shinyServer)
source("myscript.R")
getwd()
source("C:/Users/Dawid/Documents/robert/myscript.R")
shinyUI<-fluidPage(
fluidRow(
titlePanel(title = "Application in RSHINY"),
textInput("text1", "Give numbers with commas","1,3,12,18"),
submitButton("Update!"),
column(8,
actionButton("saveBtn","Save"),
rHandsontableOutput("table")
)
))
shinyServer<-function(input,output,session){
output$table <- renderRHandsontable({
arg=(strsplit(input$text1,",") %>% unlist() %>% as.numeric())
tabelaa=dataframe_FUNCTION(arg)
rownames(tabelaa)=paste("Row",1:4,sep="")
rhandsontable(format(tabelaa, digits=0),width=400,rowHeaderWidth=300)
})
}
shinyApp(ui=shinyUI, server=shinyServer)
shinyApp(ui=shinyUI, server=shinyServer)
runApp('robert/apka.R')
runApp('robert/apka.R')
output$saveBtn <- downloadHandler(filename="dowolna_nazwa.csv", content=write.csv(table, "dowolna_nazwa.csv"))
shinyServer<-function(input,output,session){
output$table <- renderRHandsontable({
arg=(strsplit(input$text1,",") %>% unlist() %>% as.numeric())
tabelaa=dataframe_FUNCTION(arg)
rownames(tabelaa)=paste("Row",1:4,sep="")
rhandsontable(format(tabelaa, digits=0),width=400,rowHeaderWidth=300)
})
output$saveBtn <- downloadHandler(filename="dowolna_nazwa.csv", content=write.csv(table, "dowolna_nazwa.csv"))
}
runExample()
runExample("10_download")
output$saveBtn <- downloadHandler(filename="dowolna_nazwa.csv",
content=function(file){
write.csv(output$table(),file )})
runApp('robert/apka.R')
runExample("10_download")
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('apka.R')
runApp('robert/apka.R')
runApp('apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
output$saveBtn <- downloadHandler(filename="dowolna_nazwa.csv",
content=function(file) {
write.csv(table,file)})
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
runApp('robert/apka.R')
| Tables   |      Are      |  Cool |
|----------|:-------------:|------:|
| col 1 is |  left-aligned | $1600 |
| col 2 is |    centered   |   $12 |
| col 3 is | right-aligned |    $1 |
library(keras)
max_len<-500
max_features<-2000
imdb<-dataset_imdb(num_words = max_features)
c(c(x_train, y_train), c(x_test, y_test)) %<-% imdb
x_train<- pad_sequences(x_train, maxlen = max_len)
model1 <-keras_model_sequential() %>%
layer_embedding(input_dim = max_features, output_dim = 256, input_length = max_len, name="embed") %>%
layer_conv_1d(filters = 64, kernel_size = 7, activation = "relu") %>%
layer_global_max_pooling_1d() %>%
layer_dense(units=16, activation = "relu") %>%
layer_dense(units=1, kernel_regularizer = regularizer_l1(l=0.001))
callbacks_list1<-list(
callback_early_stopping(
monitor = "val_acc",
patience = 2),
callback_model_checkpoint(
filepath = "C:/Users/Dawid/Documents/my.model.h5",
monitor="val_loss",
save_best_only = TRUE),
callback_reduce_lr_on_plateau(
monitor="val_loss",
factor=0.1,
patience=10),
callback_tensorboard(
log_dir="C:/Users/Dawid/Documents/my_log_dir",
histogram_freq = 1,
embeddings_freq=1)
)
model1 %>%  compile(
optimizer= optimizer_rmsprop(lr=1e-4),
loss="binary_crossentropy",
metrics=c("acc")
)
model1 %>%  fit(
x_train, y_train,
epochs=20,
batch_size = 128
)
result <- model1 %>%  evaluate(x_test, y_test)
result <- model1 %>%  evaluate(x_test, y_test)
renv::restore()
renv::restore()
renv::restore()
library(tidyverse)
library(RDCOMClient)
renv::activate()
library(RDCOMClient)
remove('renv')
remove.packages('renv')
renv::activate()
renv::clean()
remove.packages("renv", lib="~/renv/library/R-4.0/x86_64-w64-mingw32")
q
q()
remove.packages("renv", lib="~/renv/library/R-4.0/x86_64-w64-mingw32")
remove.packages("renv", lib="~/renv/library/R-4.0/x86_64-w64-mingw32")
renv::deactivate()
library(tidyverse)
library(RDCOMClient)
# 1. Prepare a sample report
report = iris %>% group_by(Species) %>%  summarise_all(.funs = sum)
write.csv(report, "raporttest.csv")
library(tidyverse)
library(readxl)
library(iris)
iris
write.csv(iris,'data.csv')
getwd()
setwd("G:/studia/narzedzia_DS/RScript_through_Excel")
getwd()
write.csv(iris,'data.csv')
iris
library(tidyverse)
library(readxl)
iris %>%  filter(Petal.Length >1.5)
iris
library(tidyverse)
library(readxl)
iris1 = iris %>%  filter(Petal.Length >1.5)
ris1
iris1
getwd()
write.csv(iris1,'data.csv')
# folder path
folder = "G:\studia\narzedzia_DS\RScript_through_Excel"
file.path(folder)
# folder path
folder = "G:\studia\narzedzia_DS\RScript_through_Excel"
# folder path
folder = "G:/studia/narzedzia_DS/RScript_through_Excel"
file.path(folder)
file.path(folder, iris1)
file.path(folder,'data.csv')
iris
# folder path
folder = "G:/studia/narzedzia_DS/RScript_through_Excel"
library(tidyverse)
library(readxl)
args<-commandArgs(trailingOnly=T)
value1<-as.numeric(args[1])
value2<-as.numeric(args[2])
iris1 = iris %>%  filter(Petal.Length >value1, Sepal.Length > value2)
iris1
iris1
iris
commandArgs(trailingOnly=T)
commandArgs(trailingOnly=T)
commandArgs(trailingOnly = False)
commandArgs(trailingOnly = F)
args<-commandArgs(trailingOnly=T)
args
args
commandArgs(trailingOnly=T)
ommandArgs(trailingOnly=T)
commandArgs(trailingOnly=T)
commandArgs(trailingOnly=T)
args
